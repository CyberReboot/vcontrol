#!/usr/bin/env python

import argparse
import os
import requests
import subprocess
import sys
import web

class index:
    def GET(self):
        return "vent-control"

class version:
    def GET(self):
        with open('VERSION', 'r') as f: v = f.read().strip()
        return v

def daemon_mode(args):
    sys.argv[1:] = ['0.0.0.0','8080']
    urls = (
        '/', 'index',
        '/version', 'version'
    )

    app = web.application(urls, globals())
    app.run()

    return True

def add_provider(provider, args):
    # only privileged can add providers, which currently is only
    # accessible from the server running the vent-control daemon
    daemon = 'http://localhost:8080'

    # do not use the api here, since that would expose it, instead call
    # directly to docker-machine since it's on the same machine as the daemon
    return True

def create_instance(args):
    # first ssh into the machine running vent-control daemon
    # from there use docker-machine to provision
    return True

def delete_instance(args):
    # check if controlled by docker-machine, if not fail
    # first ssh into the machine running vent-control daemon
    # from there use docker-machine to delete
    return True

def start_instance(args):
    # check if controlled by docker-machine, if not fail
    # first ssh into the machine running vent-control daemon
    # from there use docker-machine to start
    return True

def stop_instance(args):
    # check if controlled by docker-machine, if not fail
    # first ssh into the machine running vent-control daemon
    # from there use docker-machine to stop
    return True

def command_build(args):
    return True

def command_reboot(args):
    return True

def command_ssh(args):
    # get the certs from the machine running vent-control daemon
    # from there ssh to the machine, whether with docker-machine or ssh

    # !! TODO check if controlled by docker-machine, if not fail (all machines should be controlled by docker-machine)
    #subprocess.call(["docker-machine ssh "+args.machine], shell=True)
    return True

def command_start(args):
    return True

def command_stop(args):
    return True

def heartbeat_instances(args):
    return True

def heartbeat_providers(args):
    return True

def list_instances(args):
    return True

def list_providers(args):
    return True

def get_stats(args):
    return True

def get_info(args):
    return True

def deploy_template(args):
    return True

def register_instance(args):
    # use default or supply credentials
    # use generic driver from docker-machine
    # note that they will be sent to the vent-control daemon
    return True

def deregister_instance(args):
    return True

def main(bare_metal_only, daemon):

    privileged = 0
    try:
        r = requests.get('http://localhost:8080')
        if r.text == 'vent-control':
            privileged = 1
    except:
        pass

    # generate cli and parse args
    with open('VERSION', 'r') as f: version = f.read().strip()
    parser = argparse.ArgumentParser(description='vent-control: a command line interface for managing vent instances')
    subparsers = parser.add_subparsers()
    # !! TODO add more 'help' to each parser/argument

    if privileged:
        add_parser = subparsers.add_parser('add',
                                           help="add new infrastructure to run vent instances on")
        add_subparsers = add_parser.add_subparsers()
        # purposefully don't include virtualbox, hyper-v, fusion, etc.
        add_aws_parser = add_subparsers.add_parser('aws')
        add_aws_parser.add_argument('args',
                                    help='quoted args needed for docker-machine to deploy on aws')
        add_aws_parser.set_defaults(which='add_aws_parser')
        add_azure_parser = add_subparsers.add_parser('azure')
        add_azure_parser.add_argument('args',
                                      help='quoted args needed for docker-machine to deploy on azure')
        add_azure_parser.set_defaults(which='add_azure_parser')
        add_digitalocean_parser = add_subparsers.add_parser('digitalocean')
        add_digitalocean_parser.add_argument('args',
                                             help='quoted args needed for docker-machine to deploy on digitalocean')
        add_digitalocean_parser.set_defaults(which='add_digitalocean_parser')
        add_exoscale_parser = add_subparsers.add_parser('exoscale')
        add_exoscale_parser.add_argument('args',
                                         help='quoted args needed for docker-machine to deploy on exoscale')
        add_exoscale_parser.set_defaults(which='add_exoscale_parser')
        add_google_parser = add_subparsers.add_parser('google')
        add_google_parser.add_argument('args',
                                       help='quoted args needed for docker-machine to deploy on google')
        add_google_parser.set_defaults(which='add_google_parser')
        add_openstack_parser = add_subparsers.add_parser('openstack')
        add_openstack_parser.add_argument('args',
                                          help='quoted args needed for docker-machine to deploy on openstack')
        add_openstack_parser.set_defaults(which='add_openstack_parser')
        add_rackspace_parser = add_subparsers.add_parser('rackspace')
        add_rackspace_parser.add_argument('args',
                                          help='quoted args needed for docker-machine to deploy on rackspace')
        add_rackspace_parser.set_defaults(which='add_rackspace_parser')
        add_softlayer_parser = add_subparsers.add_parser('softlayer')
        add_softlayer_parser.add_argument('args',
                                          help='quoted args needed for docker-machine to deploy on softlayer')
        add_softlayer_parser.set_defaults(which='add_softlayer_parser')
        add_vmware_parser = add_subparsers.add_parser('vmware')
        add_vmware_parser.add_argument('args',
                                       help='quoted args needed for docker-machine to deploy on vmware')
        add_vmware_parser.set_defaults(which='add_vmware_parser')

    command_parser = subparsers.add_parser('command',
                                           help="command to run on vent instance")
    command_subparsers = command_parser.add_subparsers()
    cmd_build_parser = command_subparsers.add_parser('build',
                                                     help="build all of the containers on the vent instance")
    cmd_build_parser.set_defaults(which='cmd_build_parser')
    cmd_build_parser.add_argument('machine',
                                  help='machine name to build containers on')
    cmd_build_parser.add_argument('--no-cache',
                                  action='store_true',
                                  default=False,
                                  help='build containers without using cache')
    cmd_reboot_parser = command_subparsers.add_parser('reboot')
    cmd_reboot_parser.set_defaults(which='cmd_reboot_parser')
    cmd_reboot_parser.add_argument('machine',
                                   help='machine name to reboot')
    cmd_ssh_parser = command_subparsers.add_parser('ssh')
    cmd_ssh_parser.set_defaults(which='cmd_ssh_parser')
    cmd_ssh_parser.add_argument('machine',
                                help='machine name to ssh into')
    cmd_start_parser = command_subparsers.add_parser('start')
    cmd_start_parser.set_defaults(which='cmd_start_parser')
    cmd_start_parser.add_argument('machine',
                                  help='machine name to start containers on')
    cmd_start_parser.add_argument('containers',
                                  choices=['collectors',
                                           'visualization',
                                           'active',
                                           'passive'],
                                  help='category of containers to start')
    cmd_stop_parser = command_subparsers.add_parser('stop',
                                                    help="stop containers in a category on the vent instance")
    cmd_stop_parser.set_defaults(which='cmd_stop_parser')
    cmd_stop_parser.add_argument('machine',
                                 help='machine name to stop containers on')
    cmd_stop_parser.add_argument('containers',
                                 choices=['collectors',
                                          'visualization',
                                          'active',
                                          'passive'],
                                 help='category of containers to stop')
    if not bare_metal_only:
        create_parser = subparsers.add_parser('create')
        create_parser.set_defaults(which='create_parser')
        create_parser.add_argument('machine',
                                   help='machine name to create')
        create_parser.add_argument('provider',
                                   help='provider to create machine on')
        create_parser.add_argument('--cpus', '-c', default=1, type=int,
                                   help='number of cpus to create the machine with (default: 1)')
        create_parser.add_argument('--disk-size', '-d', default=20000, type=int,
                                   help='disk space in MBs to create the machine with (default: 20000)')
        create_parser.add_argument('--memory', '-m', default=1024, type=int,
                                   help='memory in MBs to create the machine with (default: 1024)')
    daemon_parser = subparsers.add_parser('daemon')
    daemon_parser.set_defaults(which='daemon_parser')
    if not bare_metal_only:
        delete_parser = subparsers.add_parser('delete')
        delete_parser.set_defaults(which='delete_parser')
        delete_parser.add_argument('machine',
                                   help='machine name to delete')

    # !! TODO
    deploy_parser = subparsers.add_parser('deploy')
    deploy_parser.set_defaults(which='deploy_parser')

    deregister_parser = subparsers.add_parser('deregister')
    deregister_parser.set_defaults(which='deregister_parser')
    deregister_parser.add_argument('machine',
                                   help='machine name to deregister')
    heartbeat_parser = subparsers.add_parser('heartbeat')
    heartbeat_subparsers = heartbeat_parser.add_subparsers()
    hb_instances_parser = heartbeat_subparsers.add_parser('instances')
    hb_instances_parser.set_defaults(which='hb_instances_parser')
    hb_providers_parser = heartbeat_subparsers.add_parser('providers')
    hb_providers_parser.set_defaults(which='hb_providers_parser')
    info_parser = subparsers.add_parser('info')
    info_parser.set_defaults(which='info_parser')
    info_parser.add_argument('machine',
                             help='machine name to get info from')
    list_parser = subparsers.add_parser('list')
    list_subparsers = list_parser.add_subparsers()
    ls_instances_parser = list_subparsers.add_parser('instances')
    ls_instances_parser.set_defaults(which='ls_instances_parser')
    ls_providers_parser = list_subparsers.add_parser('providers')
    ls_providers_parser.set_defaults(which='ls_providers_parser')

    # !! TODO
    register_parser = subparsers.add_parser('register')
    register_parser.set_defaults(which='register_parser')
    register_parser.add_argument('machine',
                                 help='machine name to register')

    if not bare_metal_only:
        start_parser = subparsers.add_parser('start')
        start_parser.set_defaults(which='start_parser')
        start_parser.add_argument('machine',
                                  help='machine name to start')
    stats_parser = subparsers.add_parser('stats')
    stats_parser.set_defaults(which='stats_parser')
    stats_parser.add_argument('machine',
                              help='machine name to get stats from')
    if not bare_metal_only:
        stop_parser = subparsers.add_parser('stop')
        stop_parser.set_defaults(which='stop_parser')
        stop_parser.add_argument('machine',
                                 help='machine name to stop')

    args = parser.parse_args()
    if args.which != "daemon_parser":
        if not daemon:
            print "Environment variable VENT_CONTROL_DAEMON not set, defaulting to http://localhost:8080"
            daemon = 'http://localhost:8080'
        try:
            r = requests.get(daemon)
            if r.text == 'vent-control':
                print "daemon running and reachable!"
            else:
                sys.exit()
        except:
            print "unable to reach the daemon, please start one and set VENT_CONTROL_DAEMON in your environment"
            sys.exit()

    if privileged:
        if args.which == "add_aws_parser": add_provider("amazonec2", args)
        if args.which == "add_azure_parser": add_provider("azure", args)
        if args.which == "add_digitalocean_parser": add_provider("digitalocean", args)
        if args.which == "add_exoscale_parser": add_provider("exoscale", args)
        if args.which == "add_google_parser": add_provider("google", args)
        if args.which == "add_openstack_parser": add_provider("openstack", args)
        if args.which == "add_rackspace_parser": add_provider("rackspace", args)
        if args.which == "add_softlayer_parser": add_provider("softlayer", args)
        if args.which == "add_vmware_parser": add_provider("vmwarevsphere", args)

    if args.which == "cmd_build_parser": command_build(args)
    elif args.which == "cmd_reboot_parser": command_reboot(args)
    elif args.which == "cmd_ssh_parser": command_ssh(args)
    elif args.which == "cmd_start_parser": command_start(args)
    elif args.which == "cmd_stop_parser": command_stop(args)
    elif args.which == "create_parser": create_instance(args)
    elif args.which == "daemon_parser": daemon_mode(args)
    elif args.which == "delete_parser": delete_instance(args)
    elif args.which == "deploy_parser": deploy_template(args)
    elif args.which == "deregister_parser": deregister_instance(args)
    elif args.which == "hb_instances_parser": heartbeat_instances(args)
    elif args.which == "hb_providers_parser": heartbeat_providers(args)
    elif args.which == "info_parser": get_info(args)
    elif args.which == "ls_instances_parser": list_instances(args)
    elif args.which == "ls_providers_parser": list_providers(args)
    elif args.which == "register_parser": register_instance(args)
    elif args.which == "start_parser": start_instance(args)
    elif args.which == "stats_parser": get_stats(args)
    elif args.which == "stop_parser": stop_instance(args)
    else: pass # should never get here

    return

if __name__ == '__main__':
    bare_metal_only = os.environ.get('VENT_CONTROL_BARE_METAL_ONLY')
    daemon = os.environ.get('VENT_CONTROL_DAEMON')
    main(bare_metal_only, daemon)
